print("Hello World!")
print("Hello World")
print("Hello World")
library(swirl)
install.packages("swirl")
library(swirl)
swirl()
5 + 7
install.packages("swirl")
library(swirl)
swirl()
print("Hello World")
print("Hello World")
a <- 5
??dsb()
install.packages("swirl")
library(swirl)
swirl()
5 + 7
bye()
print("Hello World")
summary(iris)
ls()
rm(list=ls())
dir.create("output")
dir_save <- "output/"
library(tidyverse) # Needed for 'glimpse()'
library(openxlsx) # Needed to export data.frame to .xlsx
library(dplyr) # Needed to convert rownames to column and simultaneously delete rownames
library(rio) # Needed for 'import' function
library(readxl) # Needed for alternative method for importing .xlsx
data("iris")
data("mtcars")
# Look at the first few rows of each dataframe
head(iris)
head(mtcars)
# Indicate how many rows you want to see
head(mtcars, 10)
# Use tidyverse package to generate a transposed view - NOT a dataframe, just a summary
glimpse(iris)
glimpse(mtcars)
# To check the class of the object
class(iris)
class(mtcars)
# str essentially combines glimpse and class
str(iris)
str(mtcars)
# To generate column-wise summaries for each variable in a dataframe
summary(iris)
summary(mtcars)
write.xlsx(iris, paste0(dir_save, "iris_data.xlsx"))
data.frames <- list('Sheet1' = iris, 'Sheet2' = mtcars)
write.xlsx(data.frames, file = paste0(dir_save, "iris_mtcars_data.xlsx"))
write.xlsx(data.frames, file = paste0(dir_save, "iris_mtcars_data_colrow.xlsx"), colNames = TRUE, rowNames = TRUE)
mtcars <- tibble::rownames_to_column(mtcars, "Model")
data.frames <- list('Sheet1' = iris, 'Sheet2' = mtcars)
write.xlsx(data.frames, file = paste0(dir_save, "iris_mtcars_data_rownamestocol.xlsx"))
write.csv(iris, file = paste0(dir_save, "iris_data.csv"))
mtcars <- column_to_rownames(mtcars, var = "Model")
write.csv(mtcars, file = paste0(dir_save, "mtcars_data.csv"))
write.csv(mtcars, file = paste0(dir_save, "mtcars_data_colrowfalse.csv"), col.names = FALSE, row.names = FALSE)
write.csv(mtcars, file = paste0(dir_save, "mtcars_data_colrowfalse.csv"), col.names = FALSE, row.names = FALSE)
write.table(mtcars, file = paste0(dir_save, "mtcars_data_colfalse.csv"), col.names = FALSE, row.names = FALSE)
df.iris.xlsx <- read.xlsx(xlsxFile = "output/iris_mtcars_data_colrow.xlsx",
sheet = 1,
rowNames = TRUE)
View(df.iris.xlsx)
class(df.iris.xlsx)
head(df.iris.xlsx)
class(df.iris.xlsx)
head(df.iris.xlsx)
df.mtcars.xlsx <- read_xlsx("output/iris_mtcars_data_colrow.xlsx",
sheet = 2)
View(df.mtcars.xlsx)
class(df.mtcars.xlsx)
head(df.mtcars.xlsx)
df.mtcars.xlsx <- as.data.frame(df.mtcars.xlsx)
class(df.mtcars.xlsx)
rownames(df.mtcars.xlsx) <- df.mtcars.xlsx[[1]]
df.mtcars.xlsx <- df.mtcars.xlsx[-1]
head(df.mtcars.xlsx)
df.iris.csv <- read.csv("output/iris_data.csv")
View(df.iris.csv)
df.iris.csv <- import("output/iris_data.csv")
View(df.iris.csv)
df.iris.csv <- read.csv("output/iris_data.csv")
View(df.iris.csv)
df.iris.csv <- import("output/iris_data.csv")
View(df.iris.csv)
df.iris.csv <- read.table("output/iris_data.csv", row.names = 1, header = TRUE, sep = ",")
View(df.iris.csv)
head(df.iris.csv)
df.mtcars.csv <- read.table("output/mtcars_data.csv", row.names = 1, header = TRUE, sep = ",")
head(df.mtcars.csv)
ggplot(data = df.iris.csv,
mapping = aes(x = Sepal.Length, y = Petal.Length)) +
geom_point(aes(color = Petal.Width)) +
geom_smooth(method="lm") +
labs(title = "Petal vs. Sepal Length", subtitle = "Separated by Species", x = "Sepal Length", y = "Petal Length") +
facet_wrap(~Species,
scales = "free_x") +
theme(plot.title = element_text(face = "bold"))
ggsave("output/iris_ggplot.pdf", width = 7, height = 7)
ggsave("output/iris_ggplot.png", width = 7, height = 7)
ggsave("output/iris_ggplot.jpeg", width = 7, height = 7)
plot <- ggplot(data = df.iris.csv,
mapping = aes(x = Sepal.Length, y = Petal.Length)) +
geom_point(aes(color = Petal.Width)) +
geom_smooth(method="lm") +
labs(title = "Petal vs. Sepal Length", subtitle = "Separated by Species", x = "Sepal Length", y = "Petal Length") +
facet_wrap(~Species,
scales = "free_x") +
theme(plot.title = element_text(face = "bold"))
pdf("output/iris_plot.pdf", width = 7, height = 7)
print(plot)
invisible(capture.output(dev.off()))
png(filename = "output/iris_plot.png", width = 1500, height = 1500, res = 300)
print(plot)
invisible(capture.output(dev.off()))
jpeg("output/iris_plot.jpeg", width = 1500, height = 1500, res = 300)
print(plot)
invisible(capture.output(dev.off()))
save(df.iris.csv, file = paste0(dir_save, "df.iris.csv.RData"))
save.image(paste0(dir_save, "Data_Export_Tutorial.RData"))
ls()
rm(list=ls())
load("output/Data_Export_Tutorial.RData")
saveRDS(df.iris.csv, file = paste0(dir_save, "df.iris.csv.rds"))
ls()
rm(list=ls())
reloaded_data <- readRDS("output/df.iris.csv.rds")
View(reloaded_data)
ls()
rm(list=ls())
dir.create("output")
dir_save <- "output/"
library(tidyverse) # Needed for 'glimpse()'
library(openxlsx) # Needed to export data.frame to .xlsx
library(dplyr) # Needed to convert rownames to column and simultaneously delete rownames
library(rio) # Needed for 'import' function
library(readxl) # Needed for alternative method for importing .xlsx
data("iris")
data("mtcars")
head(iris)
head(mtcars)
head(mtcars, 10)
glimpse(iris)
glimpse(mtcars)
class(iris)
class(mtcars)
str(iris)
str(mtcars)
summary(iris)
summary(mtcars)
write.xlsx(iris, paste0(dir_save, "iris_data.xlsx"))
ls()
rm(list=ls())
dir.create("output")
dir_save <- "output/"
library(tidyverse) # Needed for 'glimpse()'
library(openxlsx) # Needed to export data.frame to .xlsx
library(dplyr) # Needed to convert rownames to column and simultaneously delete rownames
library(rio) # Needed for 'import' function
library(readxl) # Needed for alternative method for importing .xlsx
data("iris")
data("mtcars")
head(iris)
head(mtcars)
head(mtcars, 10)
glimpse(iris)
glimpse(mtcars)
class(iris)
class(mtcars)
str(iris)
str(mtcars)
str(iris)
summary(iris)
write.xlsx(iris, paste0(dir_save, "iris_data.xlsx"))
data.frames <- list('Sheet1' = iris, 'Sheet2' = mtcars)
write.xlsx(data.frames, file = paste0(dir_save, "iris_mtcars_data.xlsx"))
write.xlsx(data.frames, file = paste0(dir_save, "iris_mtcars_data_colrow.xlsx"), colNames = TRUE, rowNames = TRUE)
mtcars <- tibble::rownames_to_column(mtcars, "Model")
View(mtcars)
data.frames <- list('Sheet1' = iris, 'Sheet2' = mtcars)
write.xlsx(data.frames, file = paste0(dir_save, "iris_mtcars_data_rownamestocol.xlsx"))
write.csv(iris, file = paste0(dir_save, "iris_data.csv"))
mtcars <- column_to_rownames(mtcars, var = "Model")
View(mtcars)
write.csv(mtcars, file = paste0(dir_save, "mtcars_data.csv"))
write.csv(mtcars, file = paste0(dir_save, "mtcars_data_colrowfalse.csv"), col.names = FALSE, row.names = FALSE)
write.table(mtcars, file = paste0(dir_save, "mtcars_data_colfalse.csv"), col.names = FALSE, row.names = FALSE)
df.iris.xlsx <- read.xlsx(xlsxFile = "output/iris_mtcars_data_colrow.xlsx",
sheet = 1,
rowNames = TRUE)
class(df.iris.xlsx)
head(df.iris.xlsx)
df.mtcars.xlsx <- read_xlsx("output/iris_mtcars_data_colrow.xlsx",
sheet = 2)
class(df.mtcars.xlsx)
head(df.mtcars.xlsx)
df.mtcars.xlsx <- as.data.frame(df.mtcars.xlsx)
df.mtcars.xlsx
View(df.mtcars.xlsx)
rownames(df.mtcars.xlsx) <- df.mtcars.xlsx[[1]]
View(df.mtcars.xlsx)
df.mtcars.xlsx <- df.mtcars.xlsx[-1]
View(df.mtcars.xlsx)
head(df.mtcars.xlsx)
df.iris.csv <- read.csv("output/iris_data.csv")
View(df.iris.csv)
df.iris.csv <- import("output/iris_data.csv")
View(df.iris.csv)
df.iris.csv <- read.table("output/iris_data.csv", row.names = 1, header = TRUE, sep = ",")
head(df.iris.csv)
df.mtcars.csv <- read.table("output/mtcars_data.csv", row.names = 1, header = TRUE, sep = ",")
head(df.mtcars.csv)
View(df.iris.csv)
View(df.mtcars.csv)
ggplot(data = df.iris.csv,
mapping = aes(x = Sepal.Length, y = Petal.Length)) +
geom_point(aes(color = Petal.Width)) +
geom_smooth(method="lm") +
labs(title = "Petal vs. Sepal Length", subtitle = "Separated by Species", x = "Sepal Length", y = "Petal Length") +
facet_wrap(~Species,
scales = "free_x") +
theme(plot.title = element_text(face = "bold"))
ggsave("output/iris_ggplot.pdf", width = 7, height = 7)
ggsave("output/iris_ggplot.png", width = 7, height = 7)
ggsave("output/iris_ggplot.jpeg", width = 7, height = 7)
plot <- ggplot(data = df.iris.csv,
mapping = aes(x = Sepal.Length, y = Petal.Length)) +
geom_point(aes(color = Petal.Width)) +
geom_smooth(method="lm") +
labs(title = "Petal vs. Sepal Length", subtitle = "Separated by Species", x = "Sepal Length", y = "Petal Length") +
facet_wrap(~Species,
scales = "free_x") +
theme(plot.title = element_text(face = "bold"))
pdf("output/iris_plot.pdf", width = 7, height = 7)
print(plot)
invisible(capture.output(dev.off()))
png(filename = "output/iris_plot.png", width = 1500, height = 1500, res = 300)
print(plot)
invisible(capture.output(dev.off()))
jpeg("output/iris_plot.jpeg", width = 1500, height = 1500, res = 300)
print(plot)
invisible(capture.output(dev.off()))
save(df.iris.csv, file = paste0(dir_save, "df.iris.csv.RData"))
save.image(paste0(dir_save, "Data_Export_Tutorial.RData"))
ls()
rm(list=ls())
load("output/Data_Export_Tutorial.RData")
saveRDS(df.iris.csv, file = paste0(dir_save, "df.iris.csv.rds"))
ls()
rm(list=ls())
reloaded_data <- readRDS("output/df.iris.csv.rds")
View(reloaded_data)
ls()
rm(list=ls())
dir.create("output")
dir_save <- "output/"
library(tidyverse) # Needed for 'glimpse()'
library(openxlsx) # Needed to export data.frame to .xlsx
library(dplyr) # Needed to convert rownames to column and simultaneously delete rownames
library(rio) # Needed for 'import' function
library(readxl) # Needed for alternative method for importing .xlsx
data("iris")
data("mtcars")
# Look at the first few rows of each dataframe
head(iris)
head(mtcars)
# Indicate how many rows you want to see
head(mtcars, 10)
# Use tidyverse package to generate a transposed view - NOT a dataframe, just a summary
glimpse(iris)
glimpse(mtcars)
# To check the class of the object
class(iris)
class(mtcars)
# str essentially combines glimpse and class
str(iris)
str(mtcars)
# To generate column-wise summaries for each variable in a dataframe
summary(iris)
summary(mtcars)
# To export a single data.frame to .xlsx
write.xlsx(iris, paste0(dir_save, "iris_data.xlsx"))
# To export multiple data.frames into different sheets, create a list of data.frames to be used as the object for write.xlsx
data.frames <- list('Sheet1' = iris, 'Sheet2' = mtcars)
write.xlsx(data.frames, file = paste0(dir_save, "iris_mtcars_data.xlsx"))
# Write to .xlsx including colnames and rownames for all sheets
write.xlsx(data.frames, file = paste0(dir_save, "iris_mtcars_data_colrow.xlsx"), colNames = TRUE, rowNames = TRUE)
# Alternatively, convert rownames from specific data.frames to a named column and export without rownames
mtcars <- tibble::rownames_to_column(mtcars, "Model")
data.frames <- list('Sheet1' = iris, 'Sheet2' = mtcars)
write.xlsx(data.frames, file = paste0(dir_save, "iris_mtcars_data_rownamestocol.xlsx"))
View(mtcars)
data(mtcars)
head(mtcars)
View(mtcars)
mtcars <- tibble::rownames_to_column(mtcars, "Model")
View(mtcars)
mtcars <- column_to_rownames(mtcars, var = "Model")
View(mtcars)
mtcars <- column_to_rownames(mtcars, var = "mpg")
mtcars <- tibble::rownames_to_column(mtcars, "Model")
View(mtcars)
mtcars <- column_to_rownames(mtcars, var = "mpg")
mtcars <- column_to_rownames(mtcars, var = "Model")
mtcars <- tibble::rownames_to_column(mtcars, "Vehicle")
mtcars <- column_to_rownames(mtcars, var = "Vehicle")
iris_merge <- merge(iris, iris)
??read_xlsx()
df.mtcars.xlsx <- read_xlsx(path = "output/iris_mtcars_data_colrow.xlsx")
install.packages("rmarkdown")
install.packages("quarto")
install.packages("quarto")
install.packages("rmarkdown")
Quarto is an open-source new evolution of R Markdown. Quarto supports development in various coding languages and includes publishing and authoring features for individual documents, books, presentations, and websites.
print("Hello, Quarto!")
reticulate::repl_python()
# Generate a warning
x <- -1
if (x < 0) {
warning("x is negative!")
}
reticulate::repl_python()
# Generate a warning
x <- -1
if (x < 0) {
warning("x is negative!")
}
# Generate a message
y <- 10
if (y > 5) {
message("y is greater than 5")
}
# Generate a warning
x <- -1
if (x < 0) {
warning("x is negative!")
}
# Generate a message
y <- 10
if (y > 5) {
message("y is greater than 5")
}
# Generate a warning
x <- -1
if (x < 0) {
warning("x is negative!")
}
# Generate a message
y <- 10
if (y > 5) {
message("y is greater than 5")
}
# Generate a warning
x <- -1
if (x < 0) {
warning("x is negative!")
}
# Generate a message
y <- 10
if (y > 5) {
message("y is greater than 5")
}
ls()
rm(list=ls())
library(knitr) # Needed to embed an external image within a code chunk
library(quarto) # Needed to render Quarto document from R console
library(ggplot2) # Needed to plot data
data("esoph")
head(esoph)
summary(esoph)
library(DT)
# Now just use the datatable function to display your table.
datatable(head(esoph), class = 'cell-border stripe')
ggplot(data = esoph, aes(x = agegp, y = ncases)) +
geom_point() +  # Add points
labs(title = "Esophageal Cancer by Age", x = "Age Group", y = "Number of Cases")
knitr::include_graphics("images/satvi_logo.png")
quarto_render("quartodocs.qmd")
Quarto is an open-source new evolution of R Markdown. Quarto supports development in various coding languages and includes publishing and authoring features for individual documents, books, presentations, and websites.
print("Hello, Quarto!")
print("Hello, Quarto!")
This is tester text
print("Hello Quarto!")
print("Hello, Quarto!")
reticulate::repl_python()
# Generate a warning
x <- -1
if (x < 0) {
warning("x is negative!")
}
# Generate a message
y <- 10
if (y > 5) {
message("y is greater than 5")
}
# Generate a warning
x <- -1
if (x < 0) {
warning("x is negative!")
}
# Generate a message
y <- 10
if (y > 5) {
message("y is greater than 5")
}
#| warning: FALSE
#| message: false
# Generate a warning
x <- -1
if (x < 0) {
warning("x is negative!")
}
# Generate a message
y <- 10
if (y > 5) {
message("y is greater than 5")
}
print("Hello, Quarto!")
reticulate::repl_python()
# Generate a warning
x <- -1
if (x < 0) {
warning("x is negative!")
}
# Generate a message
y <- 10
if (y > 5) {
message("y is greater than 5")
}
# Generate a warning
x <- -1
if (x < 0) {
warning("x is negative!")
}
# Generate a message
y <- 10
if (y > 5) {
message("y is greater than 5")
}
#| warning: false
#| message: false
# Generate a warning
x <- -1
if (x < 0) {
warning("x is negative!")
}
# Generate a message
y <- 10
if (y > 5) {
message("y is greater than 5")
}
ls()
rm(list=ls())
library(knitr) # Needed to embed an external image within a code chunk
library(quarto) # Needed to render Quarto document from R console
library(ggplot2) # Needed to plot data
data("esoph")
head(esoph)
summary(esoph)
library(DT)
# Now just use the datatable function to display your table.
datatable(head(esoph), class = 'cell-border stripe')
ggplot(data = esoph, aes(x = agegp, y = ncases)) +
geom_point() +  # Add points
labs(title = "Esophageal Cancer by Age", x = "Age Group", y = "Number of Cases")
![SATVI logo](images/satvi_logo.png)
![SATVI logo](images/satvi_logo.png)
![SATVI logo](images/satvi_logo.png)
![SATVI logo](images/satvi_logo.png)
knitr::include_graphics("images/satvi_logo.png")
knitr::include_graphics("images/satvi_logo.png")
quarto_render("quartodocs.qmd")
