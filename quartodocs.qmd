---
title: "Introduction to Quarto"
format: html
author: SATVI Computational Group
date: today
---

## Description

Quarto is an open-source new evolution of R Markdown. Quarto supports development in various coding languages and includes publishing and authoring features for individual documents, books, presentations, and websites.

Using Quarto can provide a helpful structure to organize, annotate, and share your scripts. Well-annotated Quarto documents can also promote code literacy as they are easy to read, write, and modify.

Quarto is very well documented. This tutorial will provide an introduction to some basic features, but we recommend that you explore independently. These links below may be a good place to start:

[Tutorial: Hello, Quarto](https://quarto.org/docs/get-started/hello/rstudio.html)

[Markdown Basics](https://quarto.org/docs/authoring/markdown-basics.html)

### Install R Markdown

To use Quarto with R you will need to install R Markdown with the rmarkdown R package. This will also install knitr which is used for rendering. After installing rmarkdown, install the quarto R package.

```{r, eval = FALSE}
install.packages("rmarkdown")
install.packages("quarto")
```

### Create a Quarto document

For the purposes of this session, we will introduce using Quarto documents using R. You can also create a Quarto project, which knits together multiple Quarto documents, Quarto presentations, Quarto interactive documents, or Quarto websites. Quarto is also supported by different visual editors including Visual Studio Code (VS Code) which we will cover in a later session.

To begin:

1.  Open RStudio
2.  Create a new Quarto document. Go to File -\> New File -\> Quarto Document

![](images/createdoc.png)

3.  Enter a name and select your preferred output format and engine. Typically we leave Knitr as the default, but you can change this if necessary.

![](images/newquartodoc.png)

4.  Save the quarto document to your working directory.

Now we can begin with editing the document itself. The most obvious difference in features from a traditional R script is that a Quarto document incorporates code chunks which separate major segments of code into different chunks. Each chunk can be formatted and run separately as well as part of the full script. We recommend that each chunk performs a specific function that can be annotated.

Sections of code containing one or more code chunks that perform a specific task can also be denoted in an outline with headings.

### Set the YAML header

At the top of the Quarto document, you will see a header demarcated by --- at the top and bottom. What is a YAML? YAML (“Yet Another Markup Language” or “YAML Ain't Markup Language,” depending on who you ask) is the metadata that tells R Markdown, Quarto, pandoc, and other software exactly how to process or display the document.

```{verbatim}
---
title: "Untitled"
format: html
editor: visual
---
```

Edit the YAML header to include relevant information.

```{verbatim}
---
title: "Introduction to Quarto"
format: html
author: SATVI Computational Group
date: today
---
```

### Create a code chunk

You can do this manually by clicking the green chunk icon on the top right of the toolbar or you can use the keyboard shortcut option + cmd + I. This will produce an empty code chunk with R as the default language.

![](images/createchunk.png)

```{r}
#| echo: fenced
#| label: R chunk


print("Hello, Quarto!")
```

If you want to change the language, simply specify the language you would like to use in the yellow opening delimiter.

```{python}
#| echo: fenced


# This is a Python code chunk
import math

# Calculate the square root of 16
sqrt_16 = math.sqrt(16)

# Print the result
print(f"The square root of 16 is {sqrt_16}")
```

### Tailor the code chunk output

Add options to each code chunk delimiter to show or hide specific information.

1.  warning = FALSE means do not show any warnings generated by the code in the output

2.  message = FALSE means do not show any messages generated by the code in the output

3.  echo = FALSE means do not show the code in the output

```{r}
#| echo: fenced


# Generate a warning
x <- -1
if (x < 0) {
  warning("x is negative!")
}

# Generate a message
y <- 10
if (y > 5) {
  message("y is greater than 5")
}
```

**Hide the warning from the output**

```{r, warning = FALSE}
#| echo: fenced


# Generate a warning
x <- -1
if (x < 0) {
  warning("x is negative!")
}

# Generate a message
y <- 10
if (y > 5) {
  message("y is greater than 5")
}
```

**Hide the message from the output**

```{r, message = FALSE}
#| echo: fenced


# Generate a warning
x <- -1
if (x < 0) {
  warning("x is negative!")
}

# Generate a message
y <- 10
if (y > 5) {
  message("y is greater than 5")
}
```

**Hide the warning and the message from the output** You can achieve the same effect using Markdown syntax instead of editing the opening delimiter.

```{r}
#| echo: fenced
#| warning: false
#| message: false


# Generate a warning
x <- -1
if (x < 0) {
  warning("x is negative!")
}

# Generate a message
y <- 10
if (y > 5) {
  message("y is greater than 5")
}
```

**Hide the code from the output**

```{r, echo = FALSE}
# Generate a warning
x <- -1
if (x < 0) {
  warning("x is negative!")
}

# Generate a message
y <- 10
if (y > 5) {
  message("y is greater than 5")
}
```

More OPML options can be found [here](https://quarto.org/docs/reference/formats/opml.html)

## Now let's test a simple script in Quarto

### Clear environment

```{r, results='hide'}
ls()
rm(list=ls())
```

### Load libraries

```{r, message=FALSE}
library(knitr) # Needed to embed an external image within a code chunk
library(quarto) # Needed to render Quarto document from R console
library(ggplot2) # Needed to plot data
```

### Load dataset

```{r}
data("esoph")
```

### Examine data structure

```{r}
head(esoph)

summary(esoph)
```

### Plot data

```{r}
ggplot(data = esoph, aes(x = agegp, y = ncases)) +
  geom_point() +  # Add points
  labs(title = "Esophageal Cancer by Age", x = "Age Group", y = "Number of Cases")

```

Quarto docs also support the import of image files stored externally. These can be arranged inline with your code or text.

## Import an image

The easiest way to do this is by using R Markdown syntax outside of a code chunk.

```{verbatim}
![SATVI logo](images/satvi_logo.png)
```

![SATVI logo](images/satvi_logo.png)

If you prefer to import from within a Quarto code chunk, you can do so using knitr

```{r}
knitr::include_graphics("images/satvi_logo.png")
```

Documentation on embedding images can be found [here](https://quarto.org/docs/authoring/figures.html)

## Render the document

When you render your document, all code chunks and inline code will be executed automatically. You can render the document with point-and-click, directly from the RStudio console, or from the command line in the Terminal. To render your Quarto document using point-and-click:

**1. Render using point-and-click**

![](images/render.png) 

This will open a preview of your rendered document automatically. You can select the type of preview you prefer using the drop down menu. If you select "Preview in Window," a separate window with your rendered file will open in your browser. If you select "Preview in Viewer Pane," a viewer pane will open within RStudio. This viewer pane will automatically update as you edit your code, so it can be helpful to select this option as you modify your documents as it will give you real-time visual updates of changes made. 

![](images/preview.png)

You can also choose to render on every save by checking the box in the toolbar:

![](images/renderonsave.png)

**2. Render from the RStudio console**

You will need to download and install the Quarto command line interface [Quarto CLI](https://quarto.org/docs/get-started/). Now type the following directly into the RStudio console. 

```{verbatim, eval = FALSE}
quarto_render("quartodocs.qmd") # This will render all formats

# You can also render to specific formats
quarto_render("quartodocs.qmd", output_format = "html")
quarto_render("quartodocs.qmd", output_format = "pdf")
quarto_render("quartodocs.qmd", output_format = "docx")
```

**3. Render from the command line**

Open the Terminal.

```{verbatim, eval = FALSE}
quarto render quartodocs.qmd # This will render all formats

# You can also render to specific formats

quarto render quartodocs.qmd --to html
quarto render quartodocs.qmd --to pdf
quarto render quartodocs.qmd --to docx
```

Further information on rendering can be found [here](https://quarto.org/docs/computations/r.html#rendering).

## Cheatsheets

Here are 2 helpful cheatsheets for working with Quarto in R:

[Quarto by RStudio](https://rstudio.github.io/cheatsheets/quarto.pdf)

[datacamp Quarto Cheetsheet](https://images.datacamp.com/image/upload/v1676540721/Marketing/Blog/Quarto_Cheat_Sheet.pdf)

## Homework

**Get familiar with Quarto**

1.  Set up a Quarto document and save to your course working directory.
2.  Populate the Quarto document with your own code, make sure each chunk and the full script runs without errors.
3.  Render the Quarto document to html and pdf (docx if you choose).
4.  Go back to the script and tailor the code chunk options to suit your visual preferences.
5.  Render the Quarto document again.
6.  Experiment with other Quarto features. We recommend initializing a Quarto project, which can knit together multiple Quarto documents into a book, website, presentation, or interactive document.

Remember you can always find help using the R package documentation for rmarkdown and quarto. To access the package documentation, type the following:

```{verbatim, eval = FALSE}
?rmarkdown
?quarto
```

**Prepare for our next session**

Instructions for downloads can be found on the installations page.

1.  If you have not done so already, make an online GitHub account.
2.  Access the SATVILab GitHub.
3.  Download and install GitHub Desktop and login with your GitHub account.
